---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: {{ .Release.Name | quote }}
        heritage: {{ .Release.Service | quote }}
      annotations:
        version: "{{ .Chart.Version }}"
      annotations:
        pod.beta.kubernetes.io/init-containers: '[
        {{- if (index .Values "volume-s3" "enabled") }}
          {
              "name": "wait-for-volume-s3-init",
              "image": "{{ .Values.wait_for.image }}",
              "imagePullPolicy": "{{ default .Values.wait_for.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}",
{{ include "imagePullSecrets_json" . | indent 14 }}
              "args": [
                  "job", "{{ template "volume-s3_name" . }}-init"
              ]
          }
        {{- end -}}
        {{- if and (index .Values "volume-s3" "enabled") (index .Values "volume-ceph" "enabled") -}},{{- end -}}
        {{- if (index .Values "volume-ceph" "enabled") }}
          {
              "name": "wait-for-volume-ceph",
              "image": "{{ .Values.wait_for.image }}",
              "imagePullPolicy": "{{ default .Values.wait_for.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}",
{{ include "imagePullSecrets_json" . | indent 14 }}
              "args": [
                  "pod", "-lapp={{ template "volume-ceph_name" . }}"
              ]
          }
        {{- end -}}
        ]'
    spec:
      hostname: node1
      subdomain: {{ template "fullname" . }}
{{ include "imagePullSecrets" . | indent 6 }}
      {{- if (index .Values "volume-nfs" "enabled") }}
      volumes:
      - name: nfs
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-nfs-pvc
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ default .Values.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
        {{- if or .Values.cpu .Values.memory }}
        resources:
          requests:
          {{- if .Values.cpu }}
            cpu: {{ .Values.cpu }}
          {{- end }}
          {{- if .Values.memory }}
            memory: {{ .Values.memory }}
          {{- end }}
        {{- end }}
        ports:
          - containerPort: 53
          - containerPort: 80
          - containerPort: 443
          - containerPort: 5555
          - containerPort: 5556
          - containerPort: 6665
          - containerPort: 6666
          - containerPort: 7443
          - containerPort: 8443
          - containerPort: 8876
          - containerPort: 8877
          - containerPort: 9443
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  op_panel stop ;
                  op_worker stop ;
                  cluster_manager stop ;
                  /etc/init.d/couchbase-server stop ;
                  pkill -f oneprovider.py ;
        readinessProbe:
          exec:
            command:
              - "/bin/bash"
              - "-c"
              - >
                service=provider ;
                user="$(curl -k -u admin:password -sS --tlsv1.2 -X GET 'https://localhost:9443/api/v3/onepanel/users/user')";
                if [[ "$user" == "" ]] ; then exit 1; else  exit 0;  fi ;
        env:
          - name: ONEPANEL_LOG_LEVEL
            value: {{ default .Values.log_level "info" | quote }}
          - name: ONEPANEL_BATCH_MODE
            value: {{ .Values.onepanel_batch_mode_enabled | quote }}
          - name: ONEPROVIDER_CONFIG
            value: |
              cluster:
                domainName: "{{ template "service_url" . }}"
                nodes:
                  n1:
                    hostname: node1
                managers:
                  mainNode: n1
                  nodes:
                    - n1
                workers:
                  nodes:
                    - n1
                databases:
                  nodes:
                    - n1
                storages:
                  posix:
                    type: posix
                    mountPoint: /volumes/storage
                {{- if (index .Values "volume-nfs" "enabled") }}
                  nfs:
                    type: posix
                    mountPoint: {{ index .Values "volume-nfs" "container_mount_path" }}
                {{- end }}
                {{- if (index .Values "volume-s3" "enabled") }}
                  s3:
                    type: s3
                    hostname: "{{ template "volume-s3_name" . }}:8000"
                    bucketName: {{ index .Values "volume-s3" "bucketName" }}
                    accessKey: {{ index .Values "volume-s3" "key_id" }}
                    secretKey: {{ index .Values "volume-s3" "access_key" }}
                    insecure: {{ index .Values "volume-s3" "insecure" }}
                {{- end }}
                {{- if (index .Values "volume-ceph" "enabled") }}
                  ceph:
                    type: ceph
                    username: {{ index .Values "volume-ceph" "username" }}
                    key: {{ index .Values "volume-ceph" "key" }}
                    monitorHostname: {{ template "volume-ceph_name" . }}
                    clusterName: {{ index .Values "volume-ceph" "cluster_name" }}
                    poolName: {{ index .Values "volume-ceph" "pool_name" }}
                {{- end }}
              oneprovider:
                register: true
                {{ if .Values.name -}}
                name: {{ .Values.name }}
                {{- else -}}
                name: {{ template "fullname" . }}
                {{- end }}
                redirectionPoint: https://{{ template "service_url" . }}
                geoLatitude: {{ .Values.geoLatitude }}
                geoLongitude: {{ .Values.geoLongitude }}
              # TODO: make it possible for onedata services to communicate using 
              # system configured DNS. this will allow to put here just service name
              # instead of FQDN
              onezone:
                domainName: {{ template "onezone_service_url" . }}
              {{- if or .Values.onepanel_admin_users .Values.onepanel_users }}
              onepanel:
                users:
                  {{- range .Values.onepanel_admin_users }}
                  {{ .login }}:
                    password: {{ .password }}
                    userRole: admin
                  {{- end }}
                  {{- range .Values.onepanel_users }}
                  {{ .login }}:
                    password: {{ .password }}
                    userRole: regular
                  {{- end }}
              {{- end }}
        {{- if (index .Values "volume-nfs" "enabled") }}
        volumeMounts:
          - mountPath: {{ index .Values "volume-nfs" "container_mount_path" }}
            name: nfs
        {{- end }}